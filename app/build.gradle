plugins {
    id 'org.jetbrains.kotlin.multiplatform'
    id 'kotlinx-serialization'
    id 'org.jetbrains.kotlin.kapt'
}
repositories {
    google()
    jcenter()
    mavenCentral()
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId 'org.jetbrains.kotlin.mpp_app_android'
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName '1.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/java']
            res.srcDirs = ['src/androidMain/res']
        }
    }
    compileOptions {
        targetCompatibility = "8"
        sourceCompatibility = "8"
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    dataBinding {
        enabled = true
    }
    packagingOptions {
        exclude("META-INF/*.kotlin_module")
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0-alpha01"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.0-alpha01"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-alpha01"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.0-alpha01"

    // glide
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    androidTestImplementation 'androidx.test:runner:1.1.0'
}

kotlin {
    android()

    iosX64("ios") {
        binaries {
            framework {
                embedBitcode('disable')
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')

                // serialization
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization")

                // http
                implementation "io.ktor:ktor-client-core:$ktor"
                implementation("io.ktor:ktor-client-json:$ktor")
                implementation("io.ktor:ktor-client-serialization:$ktor")

                // coroutines
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines")
                
                // klock
//                implementation "com.soywiz.korlibs.klock:klock:$klock"
                
                // KodeIn-DI
                implementation "org.kodein.di:kodein-di-core:$kodein"
                implementation "org.kodein.di:kodein-di-erased:$kodein"
            }
        }
        commonTest {
            dependencies {
        		implementation kotlin('test-common')
        		implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')

                // serialization
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization"

                // http
                implementation("io.ktor:ktor-client-android:$ktor")
                implementation("io.ktor:ktor-client-json-jvm:$ktor")
                implementation("io.ktor:ktor-client-serialization-jvm:$ktor")

                // coroutines
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines")
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation("org.jetbrains.kotlin:kotlin-stdlib-common:1.3.61")
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization"
                
                implementation("io.ktor:ktor-client-ios:$ktor")
                implementation "io.ktor:ktor-client-json-native:${ktor}"
                implementation "io.ktor:ktor-client-serialization-iosx64:${ktor}"

                // coroutines
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutines") {
                    version {
                        strictly '1.3.3-native-mt'
                    }
                }
            }
        }
        iosTest {
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework {
    def buildType = project.findProperty('kotlin.build.type') ?: 'DEBUG'
    def target = project.findProperty('kotlin.target') ?: 'ios'
    dependsOn kotlin.targets."$target".binaries.getFramework(buildType).linkTask

    doLast {
        def srcFile = kotlin.targets."$target".binaries.getFramework(buildType).outputFile
        def targetDir = getProperty('configuration.build.dir')
        copy {
            from srcFile.parent
            into targetDir
            include 'app.framework/**'
            include 'app.framework.dSYM'
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '6.2.2'
}
